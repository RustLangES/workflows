name: Setup Kubectl

on:
  workflow_call:
    secrets:
      token:
        required: true
      certificate:
        required: true
      host:
        required: true
    inputs:
      runs-on:
        default: ubuntu-latest
        required: false
        type: string
      version:
        default: latest
        required: false
        type: string
      run:
        required: true
        type: string
      validate-access:
        default: true
        required: false
        type: boolean

jobs:
  kubectl:
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Install kubectl
        run: |
          if [ "${{ inputs.version }}" = "latest" ]; then
            VERSION=$(curl -L -s https://dl.k8s.io/release/stable.txt)
          else
            VERSION="v${{ inputs.version }}"
          fi

          ARCH=$(uname -m)
          case $ARCH in
            x86_64) ARCH="amd64" ;;
            aarch64) ARCH="arm64" ;;
            armv7l) ARCH="arm" ;;
            *) echo "Not supported Arch: $ARCH"; exit 1 ;;
          esac

          echo "Installing kubectl version: ${VERSION} for ${ARCH}"

          curl -LO "https://dl.k8s.io/release/${VERSION}/bin/linux/${ARCH}/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Validate Installation
        run: kubectl version --client

      - name: Configure Access
        env:
          KUBE_HOST: ${{ secrets.host }}
          KUBE_CERTIFICATE: ${{ secrets.certificate }}
          KUBE_TOKEN: ${{ secrets.token }}
        run: |
          mkdir -p ~/.kube

          cat <<EOF > ~/.kube/config
          apiVersion: v1
          kind: Config
          clusters:
          - name: remote-cluster
            cluster:
              server: ${KUBE_HOST}
              certificate-authority-data: ${KUBE_CERTIFICATE}
          contexts:
          - name: remote-context
            context:
              cluster: remote-cluster
              user: remote-user
          current-context: remote-context
          users:
          - name: remote-user
            user:
              token: ${KUBE_TOKEN}
          EOF

      - name: Validate Access
        if: inputs.validate-access
        run: kubectl cluster-info

      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run Script
        run: ${{ inputs.run }}
